
/* The structure of linked list is the following
struct Node
{
  int data;
  struct Node *next;
  
  Node(int x){
      data = x;
      next = NULL;
  }
};
*/

//  function which splits the circular linked list.  head is pointer
// to head Node of given lined list.  head1_ref1 and *head_ref2
// are pointers to head pointers of resultant two halves.

void splitList(Node *head, Node **head1_ref, Node **head2_ref)
{
    
    // Node* slow=head;
    // Node* fast=head;
    
    // while(fast&&fast->next)
    // {
    //     slow-slow->next;
    //     fast=fast->next->next;
    // }
    
    // Node* h1=NULL;
    // Node* h2=NULL;
    
    
    
    // for(Node* curr=head;curr<=slow;curr=curr->next)
    // {
    //     if(h1==NULL)
    //     {
    //         h1=curr;
    //         *head1_ref=h1;
    //     }
    //     else
    //     {
    //         h1->next=curr;
    //         h1=h1->next;
    //     }
        
    // }
    // slow=slow->next;
    // while(slow)
    // {
    //     if(h2==NULL)
    //     {
    //         h2=head;
    //         *head2_ref=h2;
    //     }
    //     else
    //     {
    //         h2->next=head;
    //         h2=h2->next;
    //     }
    //     head=head->next;
    // }
    
    
    // method B
    
        // Node* slow=head;
        // Node* fast=head;
        // while(slow->next!=fast->next->next)
        // {
        //     slow=slow->next;
        //     fast=fast->next->next;
        // }
        
        // Node* h2=slow;
        
        // slow=head;
        // fast=head;
        
        // while(fast!=h2 && fast->next!=h2)
        // {
        //     slow=slow->next;
        //     fast=fast->next->next;
        // }
        
        // Node* h1=slow;
        
        // h2->next=h1->next;
        // h2=h2->next;
        // h1->next=head;
        // h1=h1->next;
        
        // *head1_ref=h1;
        // *head2_ref=h2;
    
    // method C
    
    Node *slow = head, *fast = head;
    
    while(fast->next!=head&&fast->next->next!=head)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    
    *head1_ref=head;
    *head2_ref=slow->next;
    // Node* temp=slow->next;
    slow->next=head;
    
    Node* curr=*head2_ref;
    
    while(curr->next!=head)
    {
        curr=curr->next;
        
    }
    curr->next=*head2_ref;
    
    

}
